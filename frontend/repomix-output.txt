This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/components/executor, src/app/executor
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  app/
    executor/
      page.tsx
  components/
    executor/
      CodeEditor.tsx
      Header.tsx
      SearchBar.tsx
      Templates.tsx

================================================================
Files
================================================================

================
File: src/app/executor/page.tsx
================
"use client";

import { useState, useCallback, useEffect } from "react";
import { CodeEditor } from "@/components/executor/CodeEditor";
import { Header } from "@/components/executor/Header";
import { TemplatesModal } from "@/components/executor/Templates";
import { BookOpen, ChevronRight, Settings2 } from "lucide-react";
import SearchBar from "@/components/executor/SearchBar";
import { executeCode } from "@/lib/Polling";
import { StockDataResponse } from "@/lib/types";


const DEFAULT_CODE = `
  def backtest(data):
    """
    Perform a backtest on historical OHLC data.

    Parameters:
    data (pd.DataFrame): A Pandas DataFrame with the following columns:
        - 'date' (str): Date in YYYY-MM-DD format.
        - 'open' (float): Opening price of the instrument.
        - 'high' (float): Highest price of the day.
        - 'low' (float): Lowest price of the day.
        - 'close' (float): Closing price of the instrument.
        - 'volume' (int): Trading volume.

    Example row:
        date       | open  | high  | low   | close | volume  
        -----------|-------|-------|-------|-------|--------
        2024-01-01 | 100.5 | 105.0 | 99.5  | 103.2 | 1200000

    Returns:
    pd.DataFrame: A DataFrame with added strategy signals.
    """   
`;

export default function Executor() {
  const [showTemplates, setShowTemplates] = useState(false);
  const [showParameters, setShowParameters] = useState(true);
  const [code, setCode] = useState(DEFAULT_CODE);
  const [result, setResult] = useState<string | null>(null);
  const [panelWidth, setPanelWidth] = useState(320);
  const [isResizing, setIsResizing] = useState(false);
  const [instrument, setInstrument] = useState<StockDataResponse | null>(null);

  const handleMouseDown = (e: React.MouseEvent) => {
    setIsResizing(true);
    e.preventDefault();
  };

  const handleMouseUp = () => {
    setIsResizing(false);
  };

  const handleMouseMove = useCallback(
    (e: MouseEvent) => {
      if (!isResizing) return;

      const newWidth = window.innerWidth - e.clientX;
      if (newWidth > 280 && newWidth < 600) {
        setPanelWidth(newWidth);
      }
    },
    [isResizing],
  );

  useEffect(() => {
    if (isResizing) {
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("mouseup", handleMouseUp);
      document.body.style.cursor = "col-resize";
      document.body.style.userSelect = "none";
    } else {
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    }

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("mouseup", handleMouseUp);
      document.body.style.cursor = "";
      document.body.style.userSelect = "";
    };
  }, [isResizing, handleMouseMove]);

  const handleRunStrategy = async () => {
    executeCode(code, instrument?.symbol || "20microns");
  };

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-b from-[var(--background)] to-[var(--background-subtle)]">
      <Header
        onRunStrategy={handleRunStrategy}
        onShowTemplates={() => setShowTemplates(true)}
      />

      <div className="flex-1 flex mt-16">
        <div className="flex-1 p-4 min-w-0">
          <div className="w-full h-full rounded-2xl border border-[var(--border)] bg-[var(--card)] backdrop-blur-xl overflow-hidden shadow-[var(--shadow-lg)]">
            <CodeEditor value={code} onChange={setCode} />
          </div>
        </div>

        <div className="resizer" onMouseDown={handleMouseDown} />

        <div
          style={{ width: showParameters ? panelWidth : 0 }}
          className={`border-l border-[var(--border)] bg-[var(--card)] backdrop-blur-xl transition-all duration-300 ease-in-out ${
            showParameters ? "translate-x-0" : "translate-x-full"
          } ${isResizing ? "transition-none" : ""}`}
        >
          <div className="h-12 border-b border-[var(--border)] flex items-center justify-between px-4">
            <div className="flex items-center">
              <Settings2 className="w-4 h-4 mr-2 text-[var(--foreground-subtle)]" />
              <span className="font-medium">Parameters</span>
            </div>
            <button
              onClick={() => setShowParameters(!showParameters)}
              className="btn-ghost p-1 hover:bg-[var(--card-hover)] rounded-lg"
            >
              <ChevronRight
                className={`w-4 h-4 transition-transform duration-200 ${showParameters ? "rotate-180" : ""}`}
              />
            </button>
          </div>
          <div className="p-4 space-y-6 overflow-y-auto max-h-[calc(100vh-8rem)]">
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Intrument
                </label>
                <SearchBar
                  onSelectItem={setInstrument}
                  selectedItem={instrument}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">
                  Time Period
                </label>
                <select className="input">
                  <option>Last 1 Year</option>
                  <option>Last 2 Years</option>
                  <option>Last 5 Years</option>
                  <option>Custom Range</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">
                  Initial Capital
                </label>
                <input
                  type="number"
                  className="input"
                  placeholder="Enter amount"
                  defaultValue={100000}
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">
                  Risk Per Trade (%)
                </label>
                <input
                  type="number"
                  className="input"
                  placeholder="Enter percentage"
                  defaultValue={1}
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      <TemplatesModal
        isOpen={showTemplates}
        onClose={() => setShowTemplates(false)}
      />

    </div>
  );
}

================
File: src/components/executor/CodeEditor.tsx
================
'use client';

  import { useEffect, useState, useRef, useCallback } from 'react';
  import Editor, { OnChange, Monaco } from '@monaco-editor/react'; // Import Monaco type from @monaco-editor/react
  import { useDebounceHook } from '../../lib/useDebouncer';

  interface CodeEditorProps {
    value: string;
    onChange: (value: string) => void;
  }

  declare global {
    interface Window {
      loadPyodide: (options: { indexURL: string }) => Promise<PyodideInterface>;
    }
  }

  interface PyodideInterface {
    runPython: (code: string) => any;
    runPythonAsync: (code: string) => Promise<any>;
    globals: {
      set: (key: string, value: any) => void;
    };
  }

  export function CodeEditor({ value, onChange }: CodeEditorProps) {
    const [pyodide, setPyodide] = useState<PyodideInterface | null>(null);
    
    const monacoRef = useRef<Monaco | null>(null); 
    const editorRef = useRef<any>(null);
    useEffect(() => {
      const initpy = async () => {
        try {
          if (!window.loadPyodide) {
      
            await new Promise<void>((resolve, reject) => {
              const script = document.createElement('script');
              script.src = 'https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.js';
              script.async = true;
              script.onload = () => resolve();
              script.onerror = () => reject(new Error('Failed to load Pyodide'));
              document.body.appendChild(script);
            });
          }
          const pyinstance = await window.loadPyodide({
            indexURL: "https://cdn.jsdelivr.net/pyodide/v0.25.0/full/"
          });

          pyinstance.runPython(`
            def validate_code(code):
              try:
                compile(code, '<string>', 'exec')
                return None
              except Exception as e:
                return str(e)
          `);
    
          setPyodide(pyinstance);
        } catch (error) {
          console.error('Error loading Pyodide:', error);
        }
      };
    
      initpy();
    }, []);

    const validater = useCallback(async (code: string) => {
      if (!pyodide){
        console.log(`can't validate mad because ${pyodide}`)
        return { isValid: true };
      }
      try {
        pyodide.globals.set('user_code', code);
        const error = await pyodide.runPythonAsync('validate_code(user_code)');
        if (error) throw new Error(error);
        return { isValid: true };
      } catch (e: any) {
        const match = /line (\d+)/.exec(e.message);
        console.log(e.message)
        return {
          isValid: false,
          error: {
            message: e.message,
            line: match ? parseInt(match[1], 10) : 1,
          },
        };
      }
    }, [pyodide]);


    const debouncedValidation = useDebounceHook(async (value: string) => {
      if (!value) return;
      
      const result = await validater(value);
      const model = editorRef.current?.getModel();
      if (!model || !monacoRef.current) return;

      monacoRef.current.editor.setModelMarkers(
        model,
        'python',
        result.isValid ? [] : [{
          startLineNumber: result.error!.line,
          startColumn: 1,
          endLineNumber: result.error!.line,
          endColumn: value.split('\n')[result.error!.line - 1]?.length || 1,
          message: result.error!.message,
          severity: monacoRef.current.MarkerSeverity.Error,
        }]
      );
    }, 500);

    // Handle editor changes
    const handleEditorChange: OnChange = (value = '') => {
      onChange(value);
      debouncedValidation(value);
    };

    // Handle editor beforeMount to define custom theme
    const handleEditorWillMount = (monacoInstance: Monaco) => {
      monacoRef.current = monacoInstance; // Store the Monaco instance
      monacoInstance.editor.defineTheme('backdrop-dark', {
        base: 'vs-dark',
        inherit: true,
        rules: [],
        colors: {
          'editor.background': '#09090b',
          'editor.foreground': '#fafafa',
          'editor.lineHighlightBackground': '#27272a',
          'editorGutter.background': '#09090b00',
          'editorGutter.modifiedBackground': '#09090b00',
          'editorGutter.addedBackground': '#09090b00',
          'editorGutter.deletedBackground': '#09090b00',
          'editor.selectionBackground': '#3f3f46',
          'editor.inactiveSelectionBackground': '#27272a',
          'editorLineNumber.foreground': '#52525b',
          'editorLineNumber.activeForeground': '#a1a1aa',
          'editor.selectionHighlightBackground': '#3f3f46',
          'editor.wordHighlightBackground': '#3f3f46',
          'editor.wordHighlightStrongBackground': '#3f3f46',
          'editorCursor.foreground': '#fafafa',
          'editorWhitespace.foreground': '#27272a',
          'editorIndentGuide.background': '#27272a',
          'editorIndentGuide.activeBackground': '#3f3f46',
        }
      });
    };

    return (
      <Editor
        height="100%"
        defaultLanguage="python"
        theme="backdrop-dark"
        value={value}
        onMount={(editor) => { editorRef.current = editor; }}
        onChange={handleEditorChange}
        beforeMount={handleEditorWillMount}
        options={{
          minimap: { enabled: false },
          fontSize: 14,
          fontFamily: 'JetBrains Mono, monospace',
          lineNumbers: 'on',
          roundedSelection: true,
          scrollBeyondLastLine: false,
          automaticLayout: true,
          padding: { top: 16, bottom: 16 },
          tabSize: 4,
          insertSpaces: true,
          cursorBlinking: 'smooth',
          cursorSmoothCaretAnimation: 'on',
          smoothScrolling: true,
          contextmenu: true,
          mouseWheelZoom: true,
          folding: false,
          lineNumbersMinChars: 2,
          bracketPairColorization: {
            enabled: true
          },
        }}
      />
    );
  }

================
File: src/components/executor/Header.tsx
================
'use client'

import Link from 'next/link'
import { LayoutTemplate, Play, Save } from 'lucide-react'
import { AuthButton } from '../AuthButton'

interface HeaderProps {
  onRunStrategy: () => void
  onShowTemplates: () => void
}

export function Header({ onRunStrategy, onShowTemplates }: HeaderProps) {
  return (
    <nav className="border-b border-[var(--border)] bg-[var(--card)] backdrop-blur-xl h-16 fixed top-0 w-full z-50">
      <div className="max-w-7xl mx-auto px-4 h-full flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link href="/" className="text-xl font-bold bg-gradient-to-r from-[var(--primary)] to-[var(--primary-hover)] bg-clip-text text-transparent">
            Backdrop
          </Link>
          <div className="h-6 w-px bg-[var(--border)]" />
          <button
            onClick={onShowTemplates}
            className="btn-ghost text-sm"
          >
            <LayoutTemplate className="w-4 h-4 mr-1.5" />
            Templates
          </button>
        </div>

        <div className="flex items-center gap-2 absolute left-1/2 transform -translate-x-1/2">
          <div className="flex items-center bg-[var(--card-hover)] rounded-xl p-2 gap-2">
            <button 
              onClick={onRunStrategy}
              className="btn-primary h-8 px-4 shadow-none"
            >
              <Play className="w-4 h-4 mr-1.5" />
              Run
            </button>
            <button className="btn-ghost h-8 px-3 hover:bg-[var(--card)] shadow-none">
              <Save className="w-4 h-4" />
              Save
            </button>
          </div>
        </div>


        <div className="flex items-center gap-2">
          <AuthButton />
        </div>
      </div>
    </nav>
  )
}

================
File: src/components/executor/SearchBar.tsx
================
"use client";

import { useState, useCallback } from "react";
import { useDebounceHook as useDebouncedCallback } from "@/lib/useDebouncer";
import { Input } from "@/components/ui/input";
import { Loader2 } from "lucide-react";
import { StockDataResponse } from "@/lib/types";

// Mock API call
const fetchSearchResults = async (
  query: string,
): Promise<StockDataResponse[]> => {
  const response = await fetch(`http://127.0.0.1:8000/data/search/?q=${query}`);

  if (!response.ok) {
    throw new Error("Failed to fetch search results");
  }

  const results: StockDataResponse = await response.json();

  //@ts-ignore
  return results;
};

type SearchBarProps = {
  onSelectItem: (item: StockDataResponse) => void;
  selectedItem: StockDataResponse | null;
};

export default function SearchBar({
  onSelectItem,
  selectedItem,
}: SearchBarProps) {
  const [query, setQuery] = useState("");
  const [results, setResults] = useState<StockDataResponse[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const debouncedSearch = useDebouncedCallback(async (value) => {
    if (value) {
      setIsLoading(true);
      const searchResults = await fetchSearchResults(value);
      setResults(searchResults);
      setIsLoading(false);
    } else {
      setResults([]);
    }
  }, 300);

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = e.target.value;
      setQuery(value);
      debouncedSearch(value);
    },
    [debouncedSearch],
  );

  const handleSelectItem = useCallback((item: StockDataResponse) => {
    onSelectItem(item);
    setQuery(`${item.symbol} - ${item.stock_name}`); // Set the search input value to the selected item
    console.log(query);
    setResults([]); // Clear the results after selection
  }, []);

  return (
    <div className="w-full space-y-4">
      <div className="relative w-full">
        <input
          type="text"
          placeholder="Search Instrument"
          value={query}
          onChange={handleInputChange}
          className="w-full input"
        />
        {isLoading && (
          <div className="absolute right-2 top-1/2 -translate-y-1/2">
            <Loader2 className="h-4 w-4 animate-spin text-[var(--foreground-subtle)]" />
          </div>
        )}
        {results.length > 0 && (
          <ul
            className="absolute left-0 my-2 w-full bg-[#1e2533] border border-[var(--border-hover)] 
               shadow-[var(--shadow-md)] rounded-lg z-50"
          >
            {results.map((result, index) => (
              <li
                key={index}
                className="p-2 hover:bg-[var(--card-hover)] cursor-pointer rounded-lg transition-colors duration-200 text-sm"
                onClick={() => handleSelectItem(result)}
              >
                <span className="text-[var(--foreground)]">
                  {result.symbol} - {result.stock_name}
                </span>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

================
File: src/components/executor/Templates.tsx
================
'use client'

interface TemplatesModalProps {
  isOpen: boolean
  onClose: () => void
}

export function TemplatesModal({ isOpen, onClose }: TemplatesModalProps) {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 modal-backdrop z-50 flex items-center justify-center">
      <div className="w-full max-w-4xl max-h-[80vh] overflow-auto bg-[var(--card)] rounded-2xl shadow-[var(--shadow-lg)] border border-[var(--border)]">
        <div className="border-b border-[var(--border)] p-4 flex items-center justify-between">
          <h2 className="text-xl font-semibold">Strategy Templates</h2>
          <button
            onClick={onClose}
            className="btn-ghost p-2 hover:bg-[var(--card-hover)] rounded-lg"
          >
            ✕
          </button>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {[
              'Moving Average Crossover',
              'RSI Strategy',
              'MACD Strategy',
              'Bollinger Bands',
              'Mean Reversion',
              'Trend Following'
            ].map((template) => (
              <button
                key={template}
                className="card hover:border-[var(--primary)] hover:shadow-[var(--shadow-glow)] text-left bg-[var(--card-hover)]"
              >
                <h3 className="font-medium mb-2">{template}</h3>
                <p className="text-sm text-[var(--foreground-subtle)]">
                  A basic implementation of the {template.toLowerCase()} strategy.
                </p>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}



================================================================
End of Codebase
================================================================
